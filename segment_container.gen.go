// Code generated by PDFlexgo; DO NOT EDIT.
package pdflexgo

import "github.com/kjk/flex"

// CHILDREN

func (segment *Segment) Children(children ...Node) *Segment {

	for _, child := range children {
		segment.delegated.getFlexNode().InsertChild(child.getFlexNode(), len(segment.delegated.getFlexNode().Children))
		segment.delegated.children = append(segment.delegated.children, child)
	}

	return segment
}

// DIRECTION

func (segment *Segment) Direction(direction Direction) *Segment {
	segment.delegated.getFlexNode().StyleSetDirection(flex.Direction(direction))
	return segment
}

func (segment *Segment) DirectionInherit() *Segment {
	segment.delegated.Direction(DirectionInherit)
	return segment
}

func (segment *Segment) DirectionLTR() *Segment {
	segment.delegated.Direction(DirectionLTR)
	return segment
}

func (segment *Segment) DirectionRTL() *Segment {
	segment.delegated.Direction(DirectionRTL)
	return segment
}

// FLEX DIRECTION

func (segment *Segment) FlexDirection(direction FlexDirection) *Segment {
	segment.delegated.getFlexNode().StyleSetFlexDirection(flex.FlexDirection(direction))
	return segment
}

func (segment *Segment) FlexDirectionColumn() *Segment {
	segment.delegated.FlexDirection(FlexDirectionColumn)
	return segment
}

func (segment *Segment) FlexDirectionColumnReverse() *Segment {
	segment.delegated.FlexDirection(FlexDirectionColumnReverse)
	return segment
}

func (segment *Segment) FlexDirectionRow() *Segment {
	segment.delegated.FlexDirection(FlexDirectionRow)
	return segment
}

func (segment *Segment) FlexDirectionRowReverse() *Segment {
	segment.delegated.FlexDirection(FlexDirectionRowReverse)
	return segment
}

// JustifyContent
func (segment *Segment) JustifyContent(justification Justify) *Segment {
	segment.delegated.getFlexNode().StyleSetJustifyContent(flex.Justify(justification))
	return segment
}

func (segment *Segment) JustifyContentStart() *Segment {
	segment.delegated.JustifyContent(JustifyStart)
	return segment
}

func (segment *Segment) JustifyContentCenter() *Segment {
	segment.delegated.JustifyContent(JustifyCenter)
	return segment
}

func (segment *Segment) JustifyContentEnd() *Segment {
	segment.delegated.JustifyContent(JustifyEnd)
	return segment
}

func (segment *Segment) JustifyContentSpaceBetween() *Segment {
	segment.delegated.JustifyContent(JustifySpaceBetween)
	return segment
}

func (segment *Segment) JustifyContentSpaceAround() *Segment {
	segment.delegated.JustifyContent(JustifySpaceAround)
	return segment
}

// ALIGN CONTENT

func (segment *Segment) AlignContentType(align Align) *Segment {
	segment.delegated.getFlexNode().StyleSetAlignContent(flex.Align(align))
	return segment
}

func (segment *Segment) AlignContentAuto() *Segment {
	segment.delegated.AlignContentType(AlignAuto)
	return segment
}

func (segment *Segment) AlignContentStart() *Segment {
	segment.delegated.AlignContentType(AlignStart)
	return segment
}

func (segment *Segment) AlignContentCenter() *Segment {
	segment.delegated.AlignContentType(AlignCenter)
	return segment
}

func (segment *Segment) AlignContentEnd() *Segment {
	segment.delegated.AlignContentType(AlignEnd)
	return segment
}

func (segment *Segment) AlignContentStretch() *Segment {
	segment.delegated.AlignContentType(AlignStretch)
	return segment
}

func (segment *Segment) AlignContentBaseline() *Segment {
	segment.delegated.AlignContentType(AlignBaseline)
	return segment
}

func (segment *Segment) AlignContentSpaceBetween() *Segment {
	segment.delegated.AlignContentType(AlignSpaceBetween)
	return segment
}

func (segment *Segment) AlignContentSpaceAround() *Segment {
	segment.delegated.AlignContentType(AlignSpaceAround)
	return segment
}

// ALIGN ITEMS

func (segment *Segment) AlignItemsType(align Align) *Segment {
	segment.delegated.getFlexNode().StyleSetAlignItems(flex.Align(align))
	return segment
}

func (segment *Segment) AlignItemsAuto() *Segment {
	segment.delegated.AlignItemsType(AlignAuto)
	return segment
}

func (segment *Segment) AlignItemsStart() *Segment {
	segment.delegated.AlignItemsType(AlignStart)
	return segment
}

func (segment *Segment) AlignItemsCenter() *Segment {
	segment.delegated.AlignItemsType(AlignCenter)
	return segment
}

func (segment *Segment) AlignItemsEnd() *Segment {
	segment.delegated.AlignItemsType(AlignEnd)
	return segment
}

func (segment *Segment) AlignItemsStretch() *Segment {
	segment.delegated.AlignItemsType(AlignStretch)
	return segment
}

func (segment *Segment) AlignItemsBaseline() *Segment {
	segment.delegated.AlignItemsType(AlignBaseline)
	return segment
}

func (segment *Segment) AlignItemsSpaceBetween() *Segment {
	segment.delegated.AlignItemsType(AlignSpaceBetween)
	return segment
}

func (segment *Segment) AlignItemsSpaceAround() *Segment {
	segment.delegated.AlignItemsType(AlignSpaceAround)
	return segment
}

// FLEX WRAP

func (segment *Segment) FlexWrapValue(wrapValue Wrap) *Segment {
	segment.delegated.getFlexNode().StyleSetFlexWrap(flex.Wrap(wrapValue))
	return segment
}

func (segment *Segment) FlexNoWrap() *Segment {
	segment.delegated.FlexWrapValue(WrapNoWrap)
	return segment
}

func (segment *Segment) FlexWrap() *Segment {
	segment.delegated.FlexWrapValue(WrapWrap)
	return segment
}

func (segment *Segment) FlexWrapReverse() *Segment {
	segment.delegated.FlexWrapValue(WrapWrapReverse)
	return segment
}
