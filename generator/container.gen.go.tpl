// Code generated by PDFlexgo; DO NOT EDIT.
package pdflexgo

import "github.com/kjk/flex"

// CHILDREN

func ({{ .Name }} *{{ .Type }}) Children(children ...Node) *{{ .Type }} {

	for _, child := range children {
		{{ .Name }}.getFlexNode().InsertChild(child.getFlexNode(), len({{ .Name }}.getFlexNode().Children))
		{{ .Name }}.children = append({{ .Name }}.children, child)
	}

	return {{ .Name }}
}

// DIRECTION

func ({{ .Name }} *{{ .Type }}) Direction(direction Direction) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetDirection(flex.Direction(direction))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) DirectionInherit() *{{ .Type }} {
	return {{ .Name }}.Direction(DirectionInherit)
}

func ({{ .Name }} *{{ .Type }}) DirectionLTR() *{{ .Type }} {
	return {{ .Name }}.Direction(DirectionLTR)
}

func ({{ .Name }} *{{ .Type }}) DirectionRTL() *{{ .Type }} {
	return {{ .Name }}.Direction(DirectionRTL)
}

// FLEX DIRECTION

func ({{ .Name }} *{{ .Type }}) FlexDirection(direction FlexDirection) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetFlexDirection(flex.FlexDirection(direction))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) FlexDirectionColumn() *{{ .Type }} {
	return {{ .Name }}.FlexDirection(FlexDirectionColumn)
}

func ({{ .Name }} *{{ .Type }}) FlexDirectionColumnReverse() *{{ .Type }} {
	return {{ .Name }}.FlexDirection(FlexDirectionColumnReverse)
}

func ({{ .Name }} *{{ .Type }}) FlexDirectionRow() *{{ .Type }} {
	return {{ .Name }}.FlexDirection(FlexDirectionRow)
}

func ({{ .Name }} *{{ .Type }}) FlexDirectionRowReverse() *{{ .Type }} {
	return {{ .Name }}.FlexDirection(FlexDirectionRowReverse)
}

// JustifyContent
func ({{ .Name }} *{{ .Type }}) Justify(justification Justify) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetJustifyContent(flex.Justify(justification))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) JustifyStart() *{{ .Type }} {
	return {{ .Name }}.Justify(JustifyStart)
}

func ({{ .Name }} *{{ .Type }}) JustifyCenter() *{{ .Type }} {
	return {{ .Name }}.Justify(JustifyCenter)
}

func ({{ .Name }} *{{ .Type }}) JustifyEnd() *{{ .Type }} {
	return {{ .Name }}.Justify(JustifyEnd)
}

func ({{ .Name }} *{{ .Type }}) JustifySpaceBetween() *{{ .Type }} {
	return {{ .Name }}.Justify(JustifySpaceBetween)
}

func ({{ .Name }} *{{ .Type }}) JustifySpaceAround() *{{ .Type }} {
	return {{ .Name }}.Justify(JustifySpaceAround)
}

// ALIGN CONTENT

func ({{ .Name }} *{{ .Type }}) AlignContentType(align Align) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetAlignContent(flex.Align(align))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignContentAuto() *{{ .Type }} {
	{{ .Name }}.AlignContentType(AlignAuto)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignContentStart() *{{ .Type }} {
	{{ .Name }}.AlignContentType(AlignStart)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignContentCenter() *{{ .Type }} {
	{{ .Name }}.AlignContentType(AlignCenter)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignContentEnd() *{{ .Type }} {
	{{ .Name }}.AlignContentType(AlignEnd)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignContentStretch() *{{ .Type }} {
	{{ .Name }}.AlignContentType(AlignStretch)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignContentBaseline() *{{ .Type }} {
	{{ .Name }}.AlignContentType(AlignBaseline)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignContentSpaceBetween() *{{ .Type }} {
	{{ .Name }}.AlignContentType(AlignSpaceBetween)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignContentSpaceAround() *{{ .Type }} {
	{{ .Name }}.AlignContentType(AlignSpaceAround)
	return {{ .Name }}
}

// ALIGN ITEMS

func ({{ .Name }} *{{ .Type }}) AlignItemsType(align Align) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetAlignItems(flex.Align(align))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignItemsAuto() *{{ .Type }} {
	{{ .Name }}.AlignItemsType(AlignAuto)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignItemsStart() *{{ .Type }} {
	{{ .Name }}.AlignItemsType(AlignStart)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignItemsCenter() *{{ .Type }} {
	{{ .Name }}.AlignItemsType(AlignCenter)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignItemsEnd() *{{ .Type }} {
	{{ .Name }}.AlignItemsType(AlignEnd)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignItemsStretch() *{{ .Type }} {
	{{ .Name }}.AlignItemsType(AlignStretch)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignItemsBaseline() *{{ .Type }} {
	{{ .Name }}.AlignItemsType(AlignBaseline)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignItemsSpaceBetween() *{{ .Type }} {
	{{ .Name }}.AlignItemsType(AlignSpaceBetween)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignItemsSpaceAround() *{{ .Type }} {
	{{ .Name }}.AlignItemsType(AlignSpaceAround)
	return {{ .Name }}
}

// FLEX WRAP

func ({{ .Name }} *{{ .Type }}) FlexWrapValue(wrapValue Wrap) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetFlexWrap(flex.Wrap(wrapValue))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) FlexNoWrap() *{{ .Type }} {
	return {{ .Name }}.FlexWrapValue(WrapNoWrap)
}

func ({{ .Name }} *{{ .Type }}) FlexWrap() *{{ .Type }} {
	return {{ .Name }}.FlexWrapValue(WrapWrap)
}

func ({{ .Name }} *{{ .Type }}) FlexWrapReverse() *{{ .Type }} {
	return {{ .Name }}.FlexWrapValue(WrapWrapReverse)
}
