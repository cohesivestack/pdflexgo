// Code generated by PDFlexgo; DO NOT EDIT.
package pdflexgo

import "github.com/kjk/flex"

func ({{ .Name }} *{{ .Type }}) WidthPercent(width float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetWidthPercent(float32(width))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) HeightPercent(height float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetHeightPercent(float32(height))

	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) WidthAuto() *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetWidthAuto()
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) HeightAuto() *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetHeightAuto()

	return {{ .Name }}
}

// ALIGN SELF

func ({{ .Name }} *{{ .Type }}) AlignSelfType(align Align) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetAlignSelf(flex.Align(align))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignSelfAuto() *{{ .Type }} {
	{{ .Name }}.AlignSelfType(AlignAuto)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignSelfStart() *{{ .Type }} {
	{{ .Name }}.AlignSelfType(AlignStart)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignSelfCenter() *{{ .Type }} {
	{{ .Name }}.AlignSelfType(AlignCenter)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignSelfEnd() *{{ .Type }} {
	{{ .Name }}.AlignSelfType(AlignEnd)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignSelfStretch() *{{ .Type }} {
	{{ .Name }}.AlignSelfType(AlignStretch)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignSelfBaseline() *{{ .Type }} {
	{{ .Name }}.AlignSelfType(AlignBaseline)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignSelfSpaceBetween() *{{ .Type }} {
	{{ .Name }}.AlignSelfType(AlignSpaceBetween)
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) AlignSelfSpaceAround() *{{ .Type }} {
	{{ .Name }}.AlignSelfType(AlignSpaceAround)
	return {{ .Name }}
}

// FLEX FUNCTIONS

func ({{ .Name }} *{{ .Type }}) FlexGrow(flexGrow float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetFlexGrow(float32(flexGrow))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) FlexShrink(flexShrink float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetFlexShrink(float32(flexShrink))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) FlexBasis(flexBasis float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetFlexBasis(float32(flexBasis))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) FlexBasisPercent(flexBasisPercent float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetFlexBasisPercent(float32(flexBasisPercent))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) FlexBasisAuto() *{{ .Type }} {
	flex.NodeStyleSetFlexBasisAuto({{ .Name }}.getFlexNode())
	return {{ .Name }}
}


func ({{ .Name }} *{{ .Type }}) FlexAuto() *{{ .Type }} {
	return {{ .Name }}.
		FlexGrow(1).
		FlexShrink(1).
		FlexBasisAuto()
}

func ({{ .Name }} *{{ .Type }}) FlexNone() *{{ .Type }} {
	return {{ .Name }}.
		FlexGrow(0).
		FlexShrink(0).
		FlexBasisAuto()
}

func ({{ .Name }} *{{ .Type }}) MinWidth(minWidth float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetMinWidth(float32(minWidth))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) MinWidthPercent(minWidthPercent float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetMinWidthPercent(float32(minWidthPercent))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) MinHeight(minHeight float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetMinHeight(float32(minHeight))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) MinHeightPercent(minHeightPercent float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetMinHeightPercent(float32(minHeightPercent))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) MaxWidth(maxWidth float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetMaxWidth(float32(maxWidth))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) MaxWidthPercent(maxWidthPercent float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetMaxWidthPercent(float32(maxWidthPercent))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) MaxHeight(maxHeight float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetMaxHeight(float32(maxHeight))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) MaxHeightPercent(maxHeightPercent float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetMaxHeightPercent(float32(maxHeightPercent))
	return {{ .Name }}
}

// ASPECT RATIO

func ({{ .Name }} *{{ .Type }}) AspectRatio(ratio float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetAspectRatio(float32(ratio))
	return {{ .Name }}
}

// POSITION TYPE

func ({{ .Name }} *{{ .Type }}) PositionType(_type PositionType) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetPositionType(flex.PositionType(_type))

	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) PositionTypeRelative() *{{ .Type }} {
	{{ .Name }}.PositionType(PositionTypeRelative)

	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) PositionTypeAbsolute() *{{ .Type }} {
	{{ .Name }}.PositionType(PositionTypeAbsolute)

	return {{ .Name }}
}

// POSITION  TYPE

func ({{ .Name }} *{{ .Type }}) Position(_type PositionType) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetPositionType(flex.PositionType(_type))
	return {{ .Name }}
}

// POSITION

func ({{ .Name }} *{{ .Type }}) PositionTop(position float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetPosition(flex.EdgeTop, float32(position))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) PositionRight(position float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetPosition(flex.EdgeRight, float32(position))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) PositionBottom(position float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetPosition(flex.EdgeBottom, float32(position))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) PositionLeft(position float64) *{{ .Type }} {
	{{ .Name }}.getFlexNode().StyleSetPosition(flex.EdgeLeft, float32(position))
	return {{ .Name }}
}

func ({{ .Name }} *{{ .Type }}) PositionAll(position float64) *{{ .Type }} {
	{{ .Name }}.
		PositionTop(position).
		PositionRight(position).
		PositionBottom(position).
		PositionLeft(position)
	return {{ .Name }}
}
