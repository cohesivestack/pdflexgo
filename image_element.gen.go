// Code generated by PDFlexgo; DO NOT EDIT.
package pdflexgo

import (
	"github.com/kjk/flex"
)

func (image *ImageElement) Width(width float64) *ImageElement {
	image.getFlexNode().StyleSetWidth(float32(width))
	return image
}
func (image *ImageElement) Height(height float64) *ImageElement {
	image.getFlexNode().StyleSetHeight(float32(height))
	return image
}

// MARGIN

func (image *ImageElement) MarginTop(margin float64) *ImageElement {
	image.getFlexNode().StyleSetMargin(flex.EdgeTop, float32(margin))
	return image
}
func (image *ImageElement) MarginRight(margin float64) *ImageElement {
	image.getFlexNode().StyleSetMargin(flex.EdgeRight, float32(margin))
	return image
}
func (image *ImageElement) MarginBottom(margin float64) *ImageElement {
	image.getFlexNode().StyleSetMargin(flex.EdgeBottom, float32(margin))
	return image
}
func (image *ImageElement) MarginLeft(margin float64) *ImageElement {
	image.getFlexNode().StyleSetMargin(flex.EdgeLeft, float32(margin))
	return image
}
func (image *ImageElement) MarginHorizontal(margin float64) *ImageElement {
	image.MarginLeft(margin).MarginRight(margin)
	return image
}
func (image *ImageElement) MarginVertical(margin float64) *ImageElement {
	image.MarginTop(margin).MarginBottom(margin)
	return image
}
func (image *ImageElement) MarginAll(margin float64) *ImageElement {
	image.MarginHorizontal(margin).MarginVertical(margin)
	return image
}
func (image *ImageElement) Margin(top float64, right float64, bottom float64, left float64) *ImageElement {
	image.
		MarginTop(top).
		MarginRight(right).
		MarginBottom(bottom).
		MarginLeft(left)
	return image
}

// MARGIN PERCENT

func (image *ImageElement) MarginPercentTop(margin float64) *ImageElement {
	image.getFlexNode().StyleSetMarginPercent(flex.EdgeTop, float32(margin))
	return image
}

func (image *ImageElement) MarginPercentRight(margin float64) *ImageElement {
	image.getFlexNode().StyleSetMarginPercent(flex.EdgeRight, float32(margin))
	return image
}

func (image *ImageElement) MarginPercentBottom(margin float64) *ImageElement {
	image.getFlexNode().StyleSetMarginPercent(flex.EdgeBottom, float32(margin))
	return image
}

func (image *ImageElement) MarginPercentLeft(margin float64) *ImageElement {
	image.getFlexNode().StyleSetMarginPercent(flex.EdgeLeft, float32(margin))
	return image
}

func (image *ImageElement) MarginPercentHorizontal(margin float64) *ImageElement {
	image.MarginPercentLeft(margin).MarginPercentRight(margin)
	return image
}

func (image *ImageElement) MarginPercentVertical(margin float64) *ImageElement {
	image.MarginPercentTop(margin).MarginPercentBottom(margin)
	return image
}

func (image *ImageElement) MarginPercentAll(margin float64) *ImageElement {
	image.MarginPercentHorizontal(margin).MarginPercentVertical(margin)
	return image
}

// PADDING

// For Padding

func (image *ImageElement) PaddingTop(padding float64) *ImageElement {
	image.getFlexNode().StyleSetPadding(flex.EdgeTop, float32(padding))
	return image
}

func (image *ImageElement) PaddingRight(padding float64) *ImageElement {
	image.getFlexNode().StyleSetPadding(flex.EdgeRight, float32(padding))
	return image
}

func (image *ImageElement) PaddingBottom(padding float64) *ImageElement {
	image.getFlexNode().StyleSetPadding(flex.EdgeBottom, float32(padding))
	return image
}

func (image *ImageElement) PaddingLeft(padding float64) *ImageElement {
	image.getFlexNode().StyleSetPadding(flex.EdgeLeft, float32(padding))
	return image
}

func (image *ImageElement) PaddingHorizontal(padding float64) *ImageElement {
	image.PaddingLeft(padding).PaddingRight(padding)
	return image
}

func (image *ImageElement) PaddingVertical(padding float64) *ImageElement {
	image.PaddingTop(padding).PaddingBottom(padding)
	return image
}

func (image *ImageElement) PaddingAll(padding float64) *ImageElement {
	image.PaddingHorizontal(padding).PaddingVertical(padding)
	return image
}

func (image *ImageElement) Padding(top float64, right float64, bottom float64, left float64) *ImageElement {
	image.
		PaddingTop(top).
		PaddingRight(right).
		PaddingBottom(bottom).
		PaddingLeft(left)
	return image
}

// PADDING PERCENT

func (image *ImageElement) PaddingPercentTop(padding float64) *ImageElement {
	image.getFlexNode().StyleSetPaddingPercent(flex.EdgeTop, float32(padding))
	return image
}

func (image *ImageElement) PaddingPercentRight(padding float64) *ImageElement {
	image.getFlexNode().StyleSetPaddingPercent(flex.EdgeRight, float32(padding))
	return image
}

func (image *ImageElement) PaddingPercentBottom(padding float64) *ImageElement {
	image.getFlexNode().StyleSetPaddingPercent(flex.EdgeBottom, float32(padding))
	return image
}

func (image *ImageElement) PaddingPercentLeft(padding float64) *ImageElement {
	image.getFlexNode().StyleSetPaddingPercent(flex.EdgeLeft, float32(padding))
	return image
}

func (image *ImageElement) PaddingPercentHorizontal(padding float64) *ImageElement {
	image.PaddingPercentLeft(padding).PaddingPercentRight(padding)
	return image
}

func (image *ImageElement) PaddingPercentVertical(padding float64) *ImageElement {
	image.PaddingPercentTop(padding).PaddingPercentBottom(padding)
	return image
}

func (image *ImageElement) PaddingPercentAll(padding float64) *ImageElement {
	image.PaddingPercentHorizontal(padding).PaddingPercentVertical(padding)
	return image
}

func (image *ImageElement) PaddingPercent(top float64, right float64, bottom float64, left float64) *ImageElement {
	image.
		PaddingPercentTop(top).
		PaddingPercentRight(right).
		PaddingPercentBottom(bottom).
		PaddingPercentLeft(left)
	return image
}

// BORDERWIDTH

func (image *ImageElement) BorderWidthTop(borderWidth float64) *ImageElement {
	image.getFlexNode().StyleSetBorder(flex.EdgeTop, float32(borderWidth))
	return image
}

func (image *ImageElement) BorderWidthRight(borderWidth float64) *ImageElement {
	image.getFlexNode().StyleSetBorder(flex.EdgeRight, float32(borderWidth))
	return image
}

func (image *ImageElement) BorderWidthBottom(borderWidth float64) *ImageElement {
	image.getFlexNode().StyleSetBorder(flex.EdgeBottom, float32(borderWidth))
	return image
}

func (image *ImageElement) BorderWidthLeft(borderWidth float64) *ImageElement {
	image.getFlexNode().StyleSetBorder(flex.EdgeLeft, float32(borderWidth))
	return image
}

func (image *ImageElement) BorderWidthHorizontal(borderWidth float64) *ImageElement {
	image.BorderWidthLeft(borderWidth).BorderWidthRight(borderWidth)
	return image
}

func (image *ImageElement) BorderWidthVertical(borderWidth float64) *ImageElement {
	image.BorderWidthTop(borderWidth).BorderWidthBottom(borderWidth)
	return image
}

func (image *ImageElement) BorderWidthAll(borderWidth float64) *ImageElement {
	image.BorderWidthHorizontal(borderWidth).BorderWidthVertical(borderWidth)
	return image
}

func (image *ImageElement) BorderWidth(top float64, right float64, bottom float64, left float64) *ImageElement {
	image.
		BorderWidthTop(top).
		BorderWidthRight(right).
		BorderWidthBottom(bottom).
		BorderWidthLeft(left)
	return image
}

// BACKGROUND

func (image *ImageElement) BackgroundColor(red int, green int, blue int, alpha ...float64) *ImageElement {
	image.backgroundColor = getRgba(red, green, blue, alpha...)
	return image
}

// BORDER COLOR

func (image *ImageElement) BorderColorTop(red int, green int, blue int, alpha ...float64) *ImageElement {
	image.borderColor[edgeTopIndex] = getRgba(red, green, blue, alpha...)
	return image
}

func (image *ImageElement) BorderColorRight(red int, green int, blue int, alpha ...float64) *ImageElement {
	image.borderColor[edgeRightIndex] = getRgba(red, green, blue, alpha...)
	return image
}

func (image *ImageElement) BorderColorBottom(red int, green int, blue int, alpha ...float64) *ImageElement {
	image.borderColor[edgeBottomIndex] = getRgba(red, green, blue, alpha...)
	return image
}

func (image *ImageElement) BorderColorLeft(red int, green int, blue int, alpha ...float64) *ImageElement {
	image.borderColor[edgeLeftIndex] = getRgba(red, green, blue, alpha...)
	return image
}

func (image *ImageElement) BorderColorHorizontal(red int, green int, blue int, alpha ...float64) *ImageElement {
	image.
		BorderColorLeft(red, green, blue, alpha...).
		BorderColorRight(red, green, blue, alpha...)
	return image
}

func (image *ImageElement) BorderColorVertical(red int, green int, blue int, alpha ...float64) *ImageElement {
	image.
		BorderColorTop(red, green, blue, alpha...).
		BorderColorBottom(red, green, blue, alpha...)
	return image
}

func (image *ImageElement) BorderColorAll(red int, green int, blue int, alpha ...float64) *ImageElement {
	image.
		BorderColorHorizontal(red, green, blue, alpha...).
		BorderColorVertical(red, green, blue, alpha...)
	return image
}
